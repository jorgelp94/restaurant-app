//
//  SearchViewController.swift
//  restaurant-app
//
//  Created by Jorge Luis Perales on 9/29/19.
//  Copyright (c) 2019 Jorge Luis Perales. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import NVActivityIndicatorView

protocol SearchDisplayLogic: class {
  func displayCities(_ cities: [City])
  func displayError(_ title: String, _ message: String)
  func displayActivityIndicator(_ show: Bool)
  func displayHomeViewController()
}

class SearchViewController: UIViewController, SearchDisplayLogic {
  var interactor: SearchBusinessLogic?
  var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
  
  @IBOutlet weak var tableView: UITableView!
  
  let searchController = UISearchController(searchResultsController: nil)
  var cities = [City]()
  var activityData = ActivityData()
  var type: SearchType?
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = SearchInteractor()
    let presenter = SearchPresenter()
    let router = SearchRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    if self.type! != .selection {
      configureSearchController()
    }
    
    configureNavBar()
    configureActivityIndicator()
  }
  
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    configureTableView()
    
    if cities.count > 0 {
      self.tableView.reloadData()
    }
  }
  
  override var preferredStatusBarStyle: UIStatusBarStyle {
    return .lightContent
  }
  
  func configureNavBar() {
    self.navigationItem.largeTitleDisplayMode = .never
    if self.type! == .selection {
      self.title = "Select City"
    } else {
      self.title = "Search"
      self.navigationItem.hidesBackButton = true
    }
    navigationItem.hidesSearchBarWhenScrolling = false
    self.navigationController?.navigationBar.tintColor = .white
  }
  
  func configureSearchController() {
    self.searchController.searchResultsUpdater = self
    self.searchController.obscuresBackgroundDuringPresentation = false
    self.searchController.searchBar.placeholder = "Search"
    self.searchController.searchBar.delegate = self
    self.searchController.searchBar.sizeToFit()
    navigationItem.searchController = self.searchController
  }
  
  func configureTableView() {
    self.tableView.delegate = self
    self.tableView.dataSource = self
  }
  
  func configureActivityIndicator() {
    activityData = ActivityData(size: CGSize(width: 75, height: 75), message: nil, messageFont: nil, messageSpacing: nil, type: .ballPulse, color: .white, padding: 10, displayTimeThreshold: nil, minimumDisplayTime: 3, backgroundColor: nil, textColor: nil)
  }
  
  // MARK: SearchDisplayLogic
  
  func displayCities(_ cities: [City]) {
    self.cities = cities
    self.tableView.reloadData()
  }
  
  func displayError(_ title: String, _ message: String) {
    Alert.errorAlert(view: self, title: title, message: message)
  }
  
  func displayActivityIndicator(_ show: Bool) {
    if show {
      NVActivityIndicatorPresenter.sharedInstance.startAnimating(activityData)
    } else {
      NVActivityIndicatorPresenter.sharedInstance.stopAnimating()
    }
  }
  
  func displayHomeViewController() {
    router?.routeToHomeViewController()
  }
  
}

extension SearchViewController: UITableViewDataSource, UITableViewDelegate {
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return self.cities.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    if let cell = tableView.dequeueReusableCell(withIdentifier: "cityResultCell", for: indexPath) as? CityResultCell {
      cell.configure(self.cities[indexPath.row])
      return cell
    } else {
      return UITableViewCell()
    }
  }
  
  func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
    return 68
  }
  
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    let city = self.cities[indexPath.row]
    self.interactor?.verifySelection("\(city.id)")
  }
}

extension SearchViewController: UISearchResultsUpdating, UISearchBarDelegate {
  func updateSearchResults(for searchController: UISearchController) {
    // TODO:
  }
  
  func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
    if let search = searchBar.text {
      interactor?.getCities(search: search)
    }
  }
  
  func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
    searchBar.text = ""
  }
}
